---
layout: post
title:  "模10和模N算法"
date:   2018-09-29 11:55:59 +0800
category: 算法
---

## 模10算法

对于类似银行卡号，国际移动设备辨识码这种纯数字序列的信息，可以通过Luhn算法，也就是模10算法来进行校验，几乎可以发现所有由于邻位数字被交换而产生的错误。

Luhn属于非安全哈希算法，设计它的目的是为了防止意外输错而不是为了恶意攻击。

### 校验计算

1. 将一串数字的最后添加一位校验位
2. 从校验位开始，从右至左，对于奇数位数值直接复制，对于偶数位则进行乘2操作，然后将结果的十位和个位进行相加得到新的值
3. 将2中得到的新数字序列从左至右相加得到一个和，该和取模10得到余数，再用10减去这个余数得到最终校验值
4. 将校验值作为原始数字串的最后一位，得到经过模10校验后的新数字串

例子：有串号“7992739871”，最后补一位x，得到“7992739871x”, 按照「2」进行运算得到"7994769772x", 按照「3」「4」得到x为3，所以最后得到的校验后串号为"799273998713"


### 校验核对

按照上述的校验计算方式，重新计算新的4中的和，如果可以被10整除，就表明正确，如果不能，则表示错误。

例子：“799273998713” 按照校验计算和为“599253997723”,累加和为60，能被10整除，说明正确

## 模N算法

模N算法是在模10基础上扩展的，可以处理对于字符的校验，额外的工作是要将字符转换为数字，这样方便运算。取的N值为字符串长度。

## 字符码值映射

将需要用于校验的字符串集合按照一对一的方式映射为数值（0-N的整数），比如字符串是用a-f的集合：

|--|--|--|--|--|--|--|
|字符|a|b|c|d|e|f|
|码值|0|1|2|3|4|5|

对于的字符顺序没有要求，比如也可以：

|--|--|--|--|--|--|--|
|字符|c|e|a|f|b|d|
|码值|0|1|2|3|4|5|

而且，也可以数字字符和字母字符混合：

|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|-|
|字符|0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|
|码值|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|

### 校验伪代码

```c
int CodePointFromCharacter(char character) {...}
char CharacterFromCodePoint(int codePoint) {...}
int NumberOfValidInputCharacters() {...}

char GenerateCheckCharacter(string input) {

	int factor = 2;
	int sum = 0;
	int n = NumberOfValidInputCharacters();

	// Starting from the right and working leftwards is easier since 
	// the initial "factor" will always be "2" 
	for (int i = input.Length - 1; i >= 0; i--) {
		int codePoint = CodePointFromCharacter(input[i]);
		int addend = factor * codePoint;

		// Alternate the "factor" that each "codePoint" is multiplied by
		factor = (factor == 2) ? 1 : 2;

		// Sum the digits of the "addend" as expressed in base "n"
		addend = IntegerValue(addend / n) + (addend % n);
		sum += addend;
	}

	// Calculate the number that must be added to the "sum" 
	// to make it divisible by "n"
	int remainder = sum % n;
	int checkCodePoint = (n - remainder) % n;

	return CharacterFromCodePoint(checkCodePoint);
}

bool ValidateCheckCharacter(string input) {

	int factor = 1;
	int sum = 0;
	int n = NumberOfValidInputCharacters();

	// Starting from the right, work leftwards
	// Now, the initial "factor" will always be "1" 
	// since the last character is the check character
	for (int i = input.Length - 1; i >= 0; i--) {
		int codePoint = CodePointFromCharacter(input[i]);
		int addend = factor * codePoint;

		// Alternate the "factor" that each "codePoint" is multiplied by
		factor = (factor == 2) ? 1 : 2;

		// Sum the digits of the "addend" as expressed in base "n"
		addend = IntegerValue(addend / n) + (addend % n);
		sum += addend;
	}

	int remainder = sum % n;

	return (remainder == 0);
}

```


## 参考资料
1. https://en.wikipedia.org/wiki/Luhn_algorithm
2. https://en.wikipedia.org/wiki/Luhn_mod_N_algorithm
